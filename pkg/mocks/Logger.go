// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	zerolog "github.com/rs/zerolog"
	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// Debug provides a mock function with given fields:
func (_m *Logger) Debug() *zerolog.Event {
	ret := _m.Called()

	var r0 *zerolog.Event
	if rf, ok := ret.Get(0).(func() *zerolog.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zerolog.Event)
		}
	}

	return r0
}

// Error provides a mock function with given fields:
func (_m *Logger) Error() *zerolog.Event {
	ret := _m.Called()

	var r0 *zerolog.Event
	if rf, ok := ret.Get(0).(func() *zerolog.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zerolog.Event)
		}
	}

	return r0
}

// Fatal provides a mock function with given fields:
func (_m *Logger) Fatal() *zerolog.Event {
	ret := _m.Called()

	var r0 *zerolog.Event
	if rf, ok := ret.Get(0).(func() *zerolog.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zerolog.Event)
		}
	}

	return r0
}

// Info provides a mock function with given fields:
func (_m *Logger) Info() *zerolog.Event {
	ret := _m.Called()

	var r0 *zerolog.Event
	if rf, ok := ret.Get(0).(func() *zerolog.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zerolog.Event)
		}
	}

	return r0
}

// Warn provides a mock function with given fields:
func (_m *Logger) Warn() *zerolog.Event {
	ret := _m.Called()

	var r0 *zerolog.Event
	if rf, ok := ret.Get(0).(func() *zerolog.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zerolog.Event)
		}
	}

	return r0
}

// With provides a mock function with given fields:
func (_m *Logger) With() zerolog.Context {
	ret := _m.Called()

	var r0 zerolog.Context
	if rf, ok := ret.Get(0).(func() zerolog.Context); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(zerolog.Context)
	}

	return r0
}

type mockConstructorTestingTNewLogger interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogger(t mockConstructorTestingTNewLogger) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
