// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	files "github.com/vaguecoder/firefox-backups/pkg/files"
)

// FileOperator is an autogenerated mock type for the FileOperator type
type FileOperator struct {
	mock.Mock
}

// Chmod provides a mock function with given fields: filename, permission
func (_m *FileOperator) Chmod(filename string, permission int) (files.ChmodRevertFunc, error) {
	ret := _m.Called(filename, permission)

	var r0 files.ChmodRevertFunc
	if rf, ok := ret.Get(0).(func(string, int) files.ChmodRevertFunc); ok {
		r0 = rf(filename, permission)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(files.ChmodRevertFunc)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(filename, permission)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Copy provides a mock function with given fields: src, dest
func (_m *FileOperator) Copy(src string, dest string) error {
	ret := _m.Called(src, dest)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(src, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: filename
func (_m *FileOperator) Delete(filename string) error {
	ret := _m.Called(filename)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Open provides a mock function with given fields: filename
func (_m *FileOperator) Open(filename string) (files.File, error) {
	ret := _m.Called(filename)

	var r0 files.File
	if rf, ok := ret.Get(0).(func(string) files.File); ok {
		r0 = rf(filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(files.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFileOperator interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileOperator creates a new instance of FileOperator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileOperator(t mockConstructorTestingTNewFileOperator) *FileOperator {
	mock := &FileOperator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
