// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// DBConnection is an autogenerated mock type for the DBConnection type
type DBConnection struct {
	mock.Mock
}

// Query provides a mock function with given fields: query, args
func (_m *DBConnection) Query(query string, args ...interface{}) (*sql.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *sql.Rows
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *sql.Rows); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDBConnection interface {
	mock.TestingT
	Cleanup(func())
}

// NewDBConnection creates a new instance of DBConnection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDBConnection(t mockConstructorTestingTNewDBConnection) *DBConnection {
	mock := &DBConnection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
