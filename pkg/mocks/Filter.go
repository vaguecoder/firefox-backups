// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	bookmark "github.com/vaguecoder/firefox-backups/pkg/bookmark"

	mock "github.com/stretchr/testify/mock"
)

// Filter is an autogenerated mock type for the Filter type
type Filter struct {
	mock.Mock
}

// Apply provides a mock function with given fields: _a0, _a1
func (_m *Filter) Apply(_a0 context.Context, _a1 []bookmark.Bookmark) ([]bookmark.Bookmark, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []bookmark.Bookmark
	if rf, ok := ret.Get(0).(func(context.Context, []bookmark.Bookmark) []bookmark.Bookmark); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bookmark.Bookmark)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []bookmark.Bookmark) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// String provides a mock function with given fields:
func (_m *Filter) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewFilter interface {
	mock.TestingT
	Cleanup(func())
}

// NewFilter creates a new instance of Filter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFilter(t mockConstructorTestingTNewFilter) *Filter {
	mock := &Filter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
